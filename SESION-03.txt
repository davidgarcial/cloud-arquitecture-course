SESION 03
========

CREATE PROCEDURE SP_UPDATE_ACCOUNT
@IDACCOUNT INT,
@AMOUNT DECIMAL
AS
BEGIN
    UPDATE Account
    SET TotalAmount = TotalAmount + @AMOUNT
    WHERE IdAccount = @IDACCOUNT
END
GO




  "Bus": {
    "Cn": "",
    "Topic": "transaction-topic",
    "Subscription": "account-subscription"
  }



 Microsoft.Azure.ServiceBus  




DTOs

namespace AFORO255.AZURE.Account.DTOs
{
    public class TransactionResponse
    {
        public int Id { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }
    }
}


HELPER

using System.Threading.Tasks;

namespace AFORO255.AZURE.Account.Helper
{
    public interface ISuscribeTransaction
    {
        Task Process();
        Task CloseSuscribe();
    }
}



using AFORO255.AZURE.Account.DTOs;
using AFORO255.AZURE.Account.Repositories;
using Microsoft.Azure.ServiceBus;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Account.Helper
{
    public class SuscribeTransaction : ISuscribeTransaction
    {
        private readonly IAccountRepository _accountRepository;
        private readonly SubscriptionClient _subscriptionClient;

        public SuscribeTransaction(IConfiguration configuration, IAccountRepository accountRepository)
        {
            _accountRepository = accountRepository;
            _subscriptionClient = new SubscriptionClient(configuration["Bus:Cn"],
                                                         configuration["Bus:Topic"],
                                                         configuration["Bus:Subscription"]);
        }


        public async Task CloseSuscribe()
        {
            await _subscriptionClient.CloseAsync();
        }

        private Task ProcessError(ExceptionReceivedEventArgs arg)
        {
            var contextError = arg.ExceptionReceivedContext;
            return Task.CompletedTask;
        }

        private async Task ConsumeMessage(Message message, CancellationToken token)
        {
            string data = Encoding.UTF8.GetString(message.Body);
            TransactionResponse transactionDTO = JsonConvert.DeserializeObject<TransactionResponse>(data);
            await _accountRepository.UpdateAccount(transactionDTO.AccountId, transactionDTO.Amount);

            await _subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
        }


        public async Task Process()
        {
            MessageHandlerOptions messageopt =
               new MessageHandlerOptions(ProcessError)
               {
                   AutoComplete = false,
                   MaxConcurrentCalls = 1
               };

            _subscriptionClient.RegisterMessageHandler(ConsumeMessage, messageopt);
        }
    }
}




STARTUP

public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddSingleton<IAccountRepository, AccountRepository>();
            services.AddSingleton<ISuscribeTransaction, SuscribeTransaction>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            ISuscribeTransaction subscription =
                app.ApplicationServices.GetService<ISuscribeTransaction>();
            subscription.Process().GetAwaiter().GetResult();

        }


SEGURIDAD
==========


Microsoft.EntityFrameworkCore.SqlServer 

Microsoft.EntityFrameworkCore.Design  

Microsoft.EntityFrameworkCore.Tools 

Microsoft.AspNetCore.Identity.EntityFrameworkCore 






	Components
	DTOs
	Repositories






  "ConnectionStrings": {
    "Security": "Server=tcp:serveraforo255sql.database.windows.net,1433;Initial Catalog=DB_IDENTITY;Persist Security Info=False;User ID=aforo255;Password=@f0r0255#2020;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
  }



REPOSITORIES

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace AFORO255.AZURE.Security.Repositories
{
    public class SecurityContext : IdentityDbContext<IdentityUser>
    {
        public SecurityContext(DbContextOptions options) : base(options)
        {
        }
    }
}



STARTUP

  public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();

            services.AddDbContext<SecurityContext>(
                options => options.UseSqlServer(Configuration.GetConnectionString("Security")));

            services.AddIdentity<IdentityUser, IdentityRole>(
                                options => options.SignIn.RequireConfirmedAccount = false
                            ).AddEntityFrameworkStores<SecurityContext>();

        }






dotnet tool install --global dotnet-ef

dotnet-ef migrations add First

dotnet-ef migrations add update


dotnet-ef database update



REPOSITORIES



using Microsoft.AspNetCore.Identity;
using System.Linq;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Security.Repositories
{
    public class UserRepository
    {
        public static async Task Execute(SecurityContext context, UserManager<IdentityUser> userManager)
        {
            if (!userManager.Users.Any())
            {
                var user = new IdentityUser
                {
                    UserName = "aforo255",
                    Email = "icuadros@aforo255.com"
                };
                await userManager.CreateAsync(user, "Aforo255#");
            }
        }

    }
}





PROGRAM

public static void Main(string[] args)
        {
            //CreateHostBuilder(args).Build().Run();
            var host = CreateHostBuilder(args).Build();
            using (var scope = host.Services.CreateScope())
            {
                var services = scope.ServiceProvider;
                try
                {
                    var context = services.GetRequiredService<SecurityContext>();
                    var userManager = services.GetRequiredService<UserManager<IdentityUser>>();
                    UserRepository.Execute(context, userManager).Wait();
                }
                catch (Exception ex)
                {
                    var logger = services.GetRequiredService<ILogger<Program>>();
                    logger.LogError(ex, "An error occurred while seeding the database.");
                }
            }
            host.Run();

        }




=======================

System.IdentityModel.Tokens.Jwt 


namespace AFORO255.AZURE.Security.DTOs
{
    public class UserRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }

    }
}



namespace AFORO255.AZURE.Security.DTOs
{
    public class UserResponse
    {
        public string Username { get; set; }
        public string Token { get; set; }
        public string AccessTokenExpiration { get; set; }

    }
}







"JwtKey": "Aforo255#YoAprendoEnCasa"




COMPONENTS

using Microsoft.AspNetCore.Identity;

namespace AFORO255.AZURE.Security.Components
{
    public interface IJwtGenerator
    {
        string Create(IdentityUser userRequest);
    }
}


using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace AFORO255.AZURE.Security.Components
{
    public class JwtGenerator : IJwtGenerator
    {
        private readonly IConfiguration _configuration;

        public JwtGenerator(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public string Create(IdentityUser userRequest)
        {
            var claims = new List<Claim>
            {
                new Claim(System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.NameId, userRequest.UserName)
            };

            /*Credenciales de acceso*/
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JwtKey"]));
            var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);

            var tokenDescription = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.Now.AddDays(1),
                SigningCredentials = credentials
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var token = tokenHandler.CreateToken(tokenDescription);

            return tokenHandler.WriteToken(token);

        }
    }
}





STARTUP

services.AddScoped<IJwtGenerator, JwtGenerator>();


CONTROLADOR


using AFORO255.AZURE.Security.Components;
using AFORO255.AZURE.Security.DTOs;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Security.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly UserManager<IdentityUser> userManager;
        private readonly SignInManager<IdentityUser> signInManager;
        private readonly IJwtGenerator jwtGenerator;

        public AuthController(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager,
            IJwtGenerator jwtGenerator)
        {
            this.userManager = userManager;
            this.signInManager = signInManager;
            this.jwtGenerator = jwtGenerator;
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] UserRequest userRequest)
        {
            var user = await userManager.FindByEmailAsync(userRequest.Email);
            if (user == null)
            {
                return BadRequest();
            }
            var result = await signInManager.CheckPasswordSignInAsync(user, userRequest.Password, false);
            if (result.Succeeded)
            {
                UserResponse userResponse = new UserResponse()
                {
                    Token = jwtGenerator.Create(user),
                    Username = user.UserName,
                    AccessTokenExpiration = "1d"
                };

                return Ok(userResponse);
            }
            return Unauthorized();
        }


    }
}

http://localhost:5001/api/auth

{
	"Email":"icuadros@aforo255.com",
	"Password":"Aforo255#"
}







