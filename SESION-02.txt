SESION 02
=========


az account set --subscription [ID]


az postgres server create --resource-group prod-microservices --name serveraforo255postgres --location westus --admin-user aforo255 --admin-password @f0r0255#2020 --sku-name B_Gen5_1 --version 10


az postgres server firewall-rule create --resource-group prod-microservices --server serveraforo255postgres --name AllIn --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255 



AFORO255.AZURE.Transaction



DB_TRANSACTION






CREATE TABLE Transaction(
	Id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	Amount DECIMAL,
	Type VARCHAR(10),
	CreationDate VARCHAR(50),
	AccountId INTEGER
);

select * from Transaction;



{
  "ConnectionStrings": {
    "Transaction": "Server=serveraforo255postgres.postgres.database.azure.com;Database=DB_TRANSACTION;Port=5432;User Id=aforo255@serveraforo255postgres;Password=@f0r0255#2020;Ssl Mode=Require;"
  }
}



MODELS


using System.ComponentModel.DataAnnotations.Schema;

namespace AFORO255.AZURE.Transaction.Models
{
    [Table("transaction")]
    public class Transaction
    {
        [Column("id")]
        public int Id { get; set; }
        [Column("amount")]
        public decimal Amount { get; set; }
        [Column("type")]
        public string Type { get; set; }
        [Column("creationdate")]
        public string CreationDate { get; set; }
        [Column("accountid")]
        public int AccountId { get; set; }

    }

}






DTOS

namespace AFORO255.AZURE.Transaction.DTOs
{
    public class TransactionRequest
    {
        public int AccountId { get; set; }
        public decimal Amount { get; set; }

    }
}





NUGET

Npgsql.EntityFrameworkCore.PostgreSQL


REPOSITORIES

using Microsoft.EntityFrameworkCore;

namespace AFORO255.AZURE.Transaction.Repositories
{
    public class TransactionContext : DbContext
    {
        public TransactionContext(DbContextOptions<TransactionContext> options) : base(options)
        {
        }

        public DbSet<Models.Transaction> Transaction { get; set; }
        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
        }
    }

}





 public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();

            services.AddDbContext<TransactionContext>(opt =>
                    opt.UseNpgsql(Configuration.GetConnectionString("Transaction")));

        }





using AFORO255.AZURE.Transaction.DTOs;
using AFORO255.AZURE.Transaction.Repositories;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Transaction.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TransactionController : ControllerBase
    {
        private readonly TransactionContext _transactionContext;

        public TransactionController(TransactionContext transactionContext)
        {
            _transactionContext = transactionContext;
        }

        [HttpPost("Deposit")]
        public async Task<IActionResult> Deposit([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction
            {
                AccountId = request.AccountId,
                Amount = request.Amount,
                Type = "Deposit",
                CreationDate = DateTime.Now.ToString()
            };
            _transactionContext.Add(transaction);
            await _transactionContext.SaveChangesAsync();

            return Ok(transaction);
        }

        [HttpPost("withdrawal")]
        public async Task<IActionResult> Withdrawal([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction
            {
                AccountId = request.AccountId,
                Amount = request.Amount * -1,
                Type = "withdrawal",
                CreationDate = DateTime.Now.ToString()
            };
            _transactionContext.Add(transaction);
            await _transactionContext.SaveChangesAsync();

            return Ok(transaction);
        }

    }
}





http://localhost:5003/api/transaction/deposit
http://localhost:5003/api/transaction/withdrawal


{
	"AccountId":1,
	"Amount":100
}



BASE DE DATOS
=============



DB_TRANSACTION

movements





{
  "MongoDB": {
    "ConnectionString": "",
    "DatabaseName": "DB_TRANSACTION"
  }
}





NUGET


MongoDB.Driver


CONFIG

using System;

namespace AFORO255.AZURE.Report.ConfigCollection
{
    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
    public class BsonCollectionAttribute : Attribute
    {
        public string CollectionName { get; }

        public BsonCollectionAttribute(string collectionName)
        {
            CollectionName = collectionName;
        }
    }
}











using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System;

namespace AFORO255.AZURE.Report.ConfigCollection
{
    public interface IDocument
    {
        [BsonId]
        [BsonRepresentation(BsonType.String)]
        ObjectId Id { get; set; }

        DateTime CreatedAt { get; }
    }
}








using MongoDB.Bson;
using System;

namespace AFORO255.AZURE.Report.ConfigCollection
{
    public class Document : IDocument
    {
        public ObjectId Id { get; set; }

        public DateTime CreatedAt => Id.CreationTime;

    }
}







MODELS


using AFORO255.AZURE.Report.ConfigCollection;

namespace AFORO255.AZURE.Report.Models
{
    [BsonCollection("Movements")]
    public class Movement : Document
    {
        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }

    }
}






REPOSITORIO


using AFORO255.AZURE.Report.ConfigCollection;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace AFORO255.AZURE.Report.Repositories
{
    public interface IMongoRepository<TDocument> where TDocument : IDocument
    {
        IEnumerable<TDocument> FilterBy(Expression<Func<TDocument, bool>> filterExpression);
    }
}







using AFORO255.AZURE.Report.ConfigCollection;
using Microsoft.Extensions.Configuration;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace AFORO255.AZURE.Report.Repositories
{
    public class MongoRepository<TDocument> : IMongoRepository<TDocument> where TDocument : IDocument
    {
        private readonly IMongoCollection<TDocument> _collection;
        public MongoRepository(IConfiguration configuration)
        {
            var database = new MongoClient(configuration["MongoDB:ConnectionString"]).GetDatabase(configuration["MongoDB:DatabaseName"]);
            _collection = database.GetCollection<TDocument>(GetCollectionName(typeof(TDocument)));
        }

        private protected string GetCollectionName(Type documentType)
        {
            return ((BsonCollectionAttribute)documentType.GetCustomAttributes(
                    typeof(BsonCollectionAttribute),
                    true)
                .FirstOrDefault())?.CollectionName;
        }


        public IEnumerable<TDocument> FilterBy(Expression<Func<TDocument, bool>> filterExpression)
        {
            return _collection.Find(filterExpression).ToEnumerable();
        }
    }
}






STARTUP

public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddScoped(typeof(IMongoRepository<>), typeof(MongoRepository<>));
        }




CONTROLADOR


using AFORO255.AZURE.Report.Models;
using AFORO255.AZURE.Report.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Linq;

namespace AFORO255.AZURE.Report.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ReportController : ControllerBase
    {
        private readonly IMongoRepository<Movement> _mongoRepository;

        public ReportController(IMongoRepository<Movement> mongoRepository)
        {
            _mongoRepository = mongoRepository;
        }

        [HttpGet("GetById/{id}")]
        public IActionResult GetById(int id)
        {
            var movementsAccount = _mongoRepository.FilterBy(
                filter => filter.AccountId == id
            );
            if (movementsAccount.FirstOrDefault() == null)
            {
                return NotFound();
            }
            return Ok(movementsAccount);
        }

    }
}




PRUEBA

GET
http://localhost:5004/api/report/GetById/1





AZURE SERVICE BUS
==================



transaction-topic



account-subscription

report-subscription




  "Bus": {
    "Cn": "",
    "Topic": "transaction-topic"
  }



NUGET

Microsoft.Azure.ServiceBus


HELPER


using System.Threading.Tasks;

namespace AFORO255.AZURE.Transaction.Helper
{
    public interface IEventBus
    {
        Task<bool> PublishMessage(object request);
    }
}




using Microsoft.Azure.ServiceBus;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System.Text;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Transaction.Helper
{
    public class EventBus : IEventBus
    {
        private readonly IConfiguration _configuration;

        public EventBus(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public async Task<bool> PublishMessage(object request)
        {
            string data = JsonConvert.SerializeObject(request);
            Message message = new Message(Encoding.UTF8.GetBytes(data));
            TopicClient client = new TopicClient(_configuration["Bus:Cn"], _configuration["Bus:Topic"]);

            await client.SendAsync(message);

            return true;
        }

    }

}



STARTUP

 public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();

            services.AddDbContext<TransactionContext>(opt =>
                    opt.UseNpgsql(Configuration.GetConnectionString("Transaction")));

            services.AddScoped<IEventBus, EventBus>();

        }




CONTROLADOR


using AFORO255.AZURE.Transaction.DTOs;
using AFORO255.AZURE.Transaction.Helper;
using AFORO255.AZURE.Transaction.Repositories;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace AFORO255.AZURE.Transaction.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TransactionController : ControllerBase
    {
        private readonly TransactionContext _transactionContext;
        private readonly IEventBus _eventBus;

        public TransactionController(TransactionContext transactionContext, IEventBus eventBus)
        {
            _transactionContext = transactionContext;
            _eventBus = eventBus;
        }

        [HttpPost("Deposit")]
        public async Task<IActionResult> Deposit([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction
            {
                AccountId = request.AccountId,
                Amount = request.Amount,
                Type = "Deposit",
                CreationDate = DateTime.Now.ToString()
            };
            _transactionContext.Add(transaction);
            await _transactionContext.SaveChangesAsync();

            await _eventBus.PublishMessage(transaction);

            return Ok(transaction);
        }

        [HttpPost("withdrawal")]
        public async Task<IActionResult> Withdrawal([FromBody] TransactionRequest request)
        {
            Models.Transaction transaction = new Models.Transaction
            {
                AccountId = request.AccountId,
                Amount = request.Amount * -1,
                Type = "withdrawal",
                CreationDate = DateTime.Now.ToString()
            };
            _transactionContext.Add(transaction);
            await _transactionContext.SaveChangesAsync();

            await _eventBus.PublishMessage(transaction);

            return Ok(transaction);
        }

    }
}






