SESION 08
========

  "CloudConfig": {
    "Url": ""
  }


NUGET
Microsoft.Azure.AppConfiguration.AspNetCore  


PROGRAM
 public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.ConfigureAppConfiguration((host, config) =>
                    {
                        var settings = config.Build();
                        config.AddAzureAppConfiguration(settings["CloudConfig:Url"]);
                    });
                    webBuilder.UseStartup<Startup>();
                });



STARUP

 public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();

            services.AddDbContext<SecurityContext>(
                options => options.UseSqlServer(Configuration.GetConnectionString("Security")));

            services.AddIdentity<IdentityUser, IdentityRole>(
                                options => options.SignIn.RequireConfirmedAccount = false
                            ).AddEntityFrameworkStores<SecurityContext>();

            services.AddScoped<IJwtGenerator, JwtGenerator>();

            services.AddAzureAppConfiguration();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseAzureAppConfiguration();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }




using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;

namespace AFORO255.AZURE.Security.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ConfigController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        public ConfigController(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        [HttpGet]
        public ActionResult Get()
        {
            return Ok(new { Version = _configuration["Key1Json:name1"], Sql = _configuration["ConnectionStrings:Security"] });
        }

    }
}





 public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.ConfigureAppConfiguration((host, config) =>
                    {
                        var settings = config.Build();
                        //config.AddAzureAppConfiguration(settings["CloudConfig:Url"]);
                        config.AddAzureAppConfiguration(options =>
                        {
                            options.Connect(settings["CloudConfig:Url"])
                            .ConfigureRefresh(refresh =>
                            {
                                refresh.Register("Version", true)
                                   .SetCacheExpiration(TimeSpan.FromSeconds(5));
                            });
                        });

                    });
                    webBuilder.UseStartup<Startup>();
                });



REDIS


  "Redis": {
    "Cn": ""
  }



Microsoft.Extensions.Caching.Redis 
Newtonsoft


services.AddDistributedRedisCache(o =>
            {
                o.Configuration = Configuration["Redis:Cn"];
            });



namespace AFORO255.AZURE.Report.DTOs
{
    public class MovementResponse
    {
        public int IdTransaction { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
        public string CreationDate { get; set; }
        public int AccountId { get; set; }
    }
}




using AFORO255.AZURE.Report.DTOs;
using AFORO255.AZURE.Report.Models;
using AFORO255.AZURE.Report.Repositories;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Distributed;
using System;
using System.Collections.Generic;
using System.Linq;

namespace AFORO255.AZURE.Report.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [AllowAnonymous]
    public class ReportController : ControllerBase
    {
        private readonly IMongoRepository<Movement> _mongoRepository;
        private readonly IDistributedCache _distributedCache;

        public ReportController(IMongoRepository<Movement> mongoRepository, IDistributedCache distributedCache)
        {
            _mongoRepository = mongoRepository;
            _distributedCache = distributedCache;
        }


        [HttpGet("GetById/{id}")]
        public IActionResult GetById(int id)
        {
            //var movementsAccount = _mongoRepository.FilterBy(
            //    filter => filter.AccountId == id
            //);

            //if (movementsAccount.FirstOrDefault() == null)
            //{
            //    return NotFound();
            //}
            //return Ok(movementsAccount);

            string _key = $"key-account-{id}";

            var _cache = _distributedCache.GetString(_key);
            IEnumerable<Movement> movementsAccount = null;
            if (_cache == null)
            {
                movementsAccount = _mongoRepository.FilterBy(
                filter => filter.AccountId == id
                );
                if (movementsAccount.FirstOrDefault() == null)
                {
                    return NotFound();
                }
                var options = new DistributedCacheEntryOptions()
                                    .SetSlidingExpiration(TimeSpan.FromSeconds(30));

                _distributedCache.SetString(_key, Newtonsoft.Json.JsonConvert.SerializeObject(movementsAccount), 
                    options);
                return Ok(movementsAccount);
            }
            else
            {
                var movementResponses = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MovementResponse>>(_cache);
                return Ok(movementResponses);
            }

        }

    }
}




